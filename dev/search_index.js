var documenterSearchIndex = {"docs":
[{"location":"api/#API-reference","page":"API reference","title":"API reference","text":"","category":"section"},{"location":"api/#Public","page":"API reference","title":"Public","text":"","category":"section"},{"location":"api/#TrafficAssignment.AequilibraE","page":"API reference","title":"TrafficAssignment.AequilibraE","text":"AequilibraE\n\nSolutions computed with the Python package AequilibraE.\n\n\n\n\n\n","category":"constant"},{"location":"api/#TrafficAssignment.TransCAD","page":"API reference","title":"TrafficAssignment.TransCAD","text":"TransCAD\n\nSolutions computed with the commercial software TransCAD.\n\n\n\n\n\n","category":"constant"},{"location":"api/#TrafficAssignment.TransportationNetworks","page":"API reference","title":"TrafficAssignment.TransportationNetworks","text":"TransportationNetworks\n\nDataset available at https://github.com/bstabler/TransportationNetworks.\n\n\n\n\n\n","category":"constant"},{"location":"api/#TrafficAssignment.Unified","page":"API reference","title":"TrafficAssignment.Unified","text":"Unified\n\nDataset available at https://figshare.com/articles/dataset/Aunifiedandvalidatedtrafficdatasetfor20UScities/24235696.\n\n\n\n\n\n","category":"constant"},{"location":"api/#TrafficAssignment.TrafficAssignmentDataset","page":"API reference","title":"TrafficAssignment.TrafficAssignmentDataset","text":"TrafficAssignmentDataset\n\nEnum type listing the two possible sources of data: TransportationNetworks or Unified.\n\n\n\n\n\n","category":"type"},{"location":"api/#TrafficAssignment.TrafficAssignmentProblem","page":"API reference","title":"TrafficAssignment.TrafficAssignmentProblem","text":"struct TrafficAssignmentProblem{Coord<:Union{Missing, Tuple{Number, Number}}, Capa<:Number, Length<:Number, Free<:Number, Speed<:Number, BPRMult<:Number, BPRPow<:Number, Toll<:Union{Missing, Number}, LinkT, Flow<:Union{Missing, Number}, Dem<:Number, TF<:Union{Missing, Number}, DF<:Union{Missing, Number}}\n\nInstance of the static traffic assignment problem.\n\nDetails\n\nThe link travel time is given by the formula of the Bureau of Public Roads (BPR):\n\nt = t0 * (1 + α * (f/c)^β)\n\nwhere\n\nt is the travel time\nt0 is the free flow time\nf is the flow along the link\nc is the link capacity\nα is a multiplicative coefficient (often taken to be 0.15)\nβ is an exponent (often taken to be 4)\n\nFields\n\ndataset::TrafficAssignmentDataset: name of the dataset\ninstance_name::String: name of the instance (subfolder inside the dataset)\nnb_nodes::Int64: number of nodes in the network (nodes are numbered from 1 to nb_nodes)\nnb_links::Int64: number of directed links in the network\nreal_nodes::UnitRange{Int64}: interval of nodes that correspond to real intersections\nzone_nodes::UnitRange{Int64}: interval of nodes that correspond to artificial zones\nnode_coord::Vector{Coord} where Coord<:Union{Missing, Tuple{Number, Number}}: coordinates of the nodes for plotting\nvalid_longitude_latitude::Bool: whether node_coord corresponds to the longitude and latitude\nlink_id::SparseArrays.SparseMatrixCSC{Int64, Int64}: matrix of link ids starting at one\nlink_capacity::SparseArrays.SparseMatrixCSC{Capa, Int64} where Capa<:Number: matrix of link capacities (c in the BPR formula)\nlink_length::SparseArrays.SparseMatrixCSC{Length, Int64} where Length<:Number: matrix of link lengths\nlink_free_flow_time::SparseArrays.SparseMatrixCSC{Free, Int64} where Free<:Number: matrix of link free flow times (t0 in the BPR formula)\nlink_speed_limit::SparseArrays.SparseMatrixCSC{Speed, Int64} where Speed<:Number: matrix of link speed limits\nlink_bpr_mult::SparseArrays.SparseMatrixCSC{BPRMult, Int64} where BPRMult<:Number: link multiplicative factors α in the BPR formula, either a single scalar or a matrix\nlink_bpr_power::SparseArrays.SparseMatrixCSC{BPRPow, Int64} where BPRPow<:Number: link exponents β in the BPR formula, either a single scalar or a matrix\nlink_toll::SparseArrays.SparseMatrixCSC{Toll, Int64} where Toll<:Union{Missing, Number}: matrix of link tolls\nlink_type::SparseArrays.SparseMatrixCSC{LinkT, Int64} where LinkT: matrix of link types\ndemand::Dict{Tuple{Int64, Int64}, Dem} where Dem<:Number: demand by OD pair\norigins::Vector{Int64}: vector of unique origins for the OD pairs\ndestinations::Vector{Int64}: vector of unique destinations for the OD pairs\nremoved_od_pairs::Vector{Tuple{Int64, Int64}}: OD pairs removed because no path between them exists\ndestination_free_flow_time::Dict{Int64, Vector{Free}} where Free<:Number: dictionary mapping each destination to a vector of free flow path times for every possible origin\ntoll_factor::Union{Missing, Number}: conversion factor turning toll costs into temporal costs, expressed in time/toll\ndistance_factor::Union{Missing, Number}: conversion factor turning distance costs into temporal costs, expressed in time/length\nsolution_software::Union{Missing, TrafficAssignmentSoftware}: software used to compute the provided solution, if known\noptimal_flow::SparseArrays.SparseMatrixCSC{Flow, Int64} where Flow<:Union{Missing, Number}: provided matrix of optimal link flows\n\n\n\n\n\n","category":"type"},{"location":"api/#TrafficAssignment.TrafficAssignmentProblem-Tuple{TrafficAssignmentDataset, AbstractString}","page":"API reference","title":"TrafficAssignment.TrafficAssignmentProblem","text":"TrafficAssignmentProblem(dataset, instance_name)\n\nUser-friendly constructor for TrafficAssignmentProblem.\n\nThe dataset must be a TrafficAssignmentDataset, the instance can be chosen from list_instances.\n\ntip: Tip\nWhen you run this function for the first time, the DataDeps package will ask you to confirm download. If you want to skip this check, for instance during CI, set the environment variable ENV[\"DATADEPS_ALWAYS_ACCEPT\"] = true.\n\n\n\n\n\n","category":"method"},{"location":"api/#TrafficAssignment.TrafficAssignmentSoftware","page":"API reference","title":"TrafficAssignment.TrafficAssignmentSoftware","text":"TrafficAssignmentSoftware\n\nEnum type listing the two possible software tools used to create solutions for instances from the Unified dataset: AequilibraE or TransCAD.\n\n\n\n\n\n","category":"type"},{"location":"api/#TrafficAssignment.list_instances-Tuple{TrafficAssignmentDataset}","page":"API reference","title":"TrafficAssignment.list_instances","text":"list_instances()\nlist_instances(dataset::TrafficAssignmentDataset)\n\nReturn a list of the available instances, given as a tuple with their dataset.\n\n\n\n\n\n","category":"method"},{"location":"api/#TrafficAssignment.nb_links-Tuple{TrafficAssignmentProblem}","page":"API reference","title":"TrafficAssignment.nb_links","text":"nb_links(problem::TrafficAssignmentProblem)\n\nReturn the number of links in the network (including links to and from zone nodes).\n\n\n\n\n\n","category":"method"},{"location":"api/#TrafficAssignment.nb_nodes-Tuple{TrafficAssignmentProblem}","page":"API reference","title":"TrafficAssignment.nb_nodes","text":"nb_nodes(problem::TrafficAssignmentProblem)\n\nReturn the number of nodes in the network (including zone nodes).\n\n\n\n\n\n","category":"method"},{"location":"api/#TrafficAssignment.nb_zones-Tuple{TrafficAssignmentProblem}","page":"API reference","title":"TrafficAssignment.nb_zones","text":"nb_zones(problem::TrafficAssignment)\n\nReturn the number of fake nodes in the network that represent zones.\n\n\n\n\n\n","category":"method"},{"location":"api/#TrafficAssignment.plot_network-Tuple","page":"API reference","title":"TrafficAssignment.plot_network","text":"plot_network(\n    problem::TrafficAssignmentProblem, flow=nothing;\n    nodes=false, zones=false, tiles=false\n)\n\nPlot a transportation network, possibly on top of real-world map tiles.\n\nIf a flow is provided, network edges will be colored according to their congestion level.\n\nwarning: Warning\nThis function requires loading one of Makie.jl's backends beforehand, ideally GLMakie.jl. Using tiles=true requires loading Tyler.jl in addition.\n\n\n\n\n\n","category":"method"},{"location":"api/#TrafficAssignment.price_of_anarchy-Tuple{TrafficAssignmentProblem, Vararg{Any}}","page":"API reference","title":"TrafficAssignment.price_of_anarchy","text":"price_of_anarchy(problem::TrafficAssignmentProblem, args...; kwargs...)\n\nCompute the price of anarchy (cost of equilibrium flow over cost of centralized flow) for problem.\n\nPositional and keyword arguments are forwarded to solve_frank_wolfe.\n\n\n\n\n\n","category":"method"},{"location":"api/#TrafficAssignment.social_cost-Tuple{TrafficAssignmentProblem, SparseArrays.SparseMatrixCSC}","page":"API reference","title":"TrafficAssignment.social_cost","text":"social_cost(problem::TrafficAssignmentProblem, flow::SparseMatrixCSC)\n\nReturn the social cost (total travel time) of a given solution flow to problem.\n\n\n\n\n\n","category":"method"},{"location":"api/#TrafficAssignment.solve_frank_wolfe-Union{Tuple{TrafficAssignmentProblem}, Tuple{A}, Tuple{TrafficAssignmentProblem, Val}, Tuple{TrafficAssignmentProblem, Val, A}} where A","page":"API reference","title":"TrafficAssignment.solve_frank_wolfe","text":"solve_frank_wolfe(\n    problem::TrafficAssignmentProblem,\n    control::Val,\n    frank_wolfe_alg=frank_wolfe;\n    verbose, relative_gap, kwargs...\n)\n\nSolve a traffic assignment problem with a specific control setting (either :centralized or :equilibrium), using an algorithm from the FrankWolfe library.\n\nRemaining keyword arguments are passed to frank_wolfe_alg.\n\n\n\n\n\n","category":"method"},{"location":"api/#TrafficAssignment.summarize_instances-Tuple{TrafficAssignmentDataset}","page":"API reference","title":"TrafficAssignment.summarize_instances","text":"summarize_instances()\nsummarize_instances(dataset::TrafficAssignmentDataset)\n\nReturn a DataFrame summarizing the dimensions of the available instances inside a datase.\n\n\n\n\n\n","category":"method"},{"location":"api/#Private","page":"API reference","title":"Private","text":"","category":"section"},{"location":"api/#TrafficAssignment.datapath-Tuple{TrafficAssignmentDataset}","page":"API reference","title":"TrafficAssignment.datapath","text":"datapath(dataset::TrafficAssignmentDataset)\ndatapath(dataset::TrafficAssignmentDataset, instance_name::AbstractString)\n\nReturn the absolute path to the raw data.\n\n\n\n\n\n","category":"method"},{"location":"api/#TrafficAssignment.instance_files-Tuple{TrafficAssignmentDataset, AbstractString}","page":"API reference","title":"TrafficAssignment.instance_files","text":"instance_files(dataset, instance_name)\n\nReturn a named tuple containing the absolute paths to the individual data tables of an instance.\n\n\n\n\n\n","category":"method"},{"location":"api/#TrafficAssignment.postprocess!-Tuple{TrafficAssignmentProblem}","page":"API reference","title":"TrafficAssignment.postprocess!","text":"postprocess!(pb)\n\nPerform some data cleaning on a TrafficAssignmentProblem:\n\nprecompute free flow times to every destination present in the demand\nremove OD pairs without a path between them (the free flow time is infinite)\n\n\n\n\n\n","category":"method"},{"location":"#TrafficAssignment.jl","page":"Home","title":"TrafficAssignment.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Build Status) (Image: Coverage) (Image: Dev Documentation)","category":"page"},{"location":"","page":"Home","title":"Home","text":"This is a Julia package for studying traffic assignment on road networks, based on data from:","category":"page"},{"location":"","page":"Home","title":"Home","text":"the TransportationNetworks repository\nthe Unified Traffic Dataset paper","category":"page"},{"location":"#Getting-started","page":"Home","title":"Getting started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install the latest development version, run this in your Julia Pkg REPL:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add https://github.com/gdalle/TrafficAssignment.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"Check out the documentation to know what to do next.","category":"page"},{"location":"#Credits","page":"Home","title":"Credits","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package was originally written and maintained by Changhyun Kwon (see the previous repository). It has been adapted and is now maintained by Guillaume Dalle.","category":"page"},{"location":"tutorial/#Tutorial","page":"Tutorial","title":"Tutorial","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"warning: Warning\nPage in construction.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using TrafficAssignment\nusing PrettyTables  # for table display\nusing CairoMakie, Tyler  # for plotting","category":"page"},{"location":"tutorial/#Instances","page":"Tutorial","title":"Instances","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The package gives you access to the following instances:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"pretty_table(summarize_instances())","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"To download and parse one, just specify its name inside the TrafficAssignmentProblem constructor:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"dataset = TransportationNetworks\ninstance_name = \"SiouxFalls\"\nproblem = TrafficAssignmentProblem(dataset, instance_name)","category":"page"},{"location":"tutorial/#Visualization","page":"Tutorial","title":"Visualization","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"You can visualize instances as follows:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"plot_network(problem; nodes=true, zones=false, tiles=true)","category":"page"},{"location":"tutorial/#Solution","page":"Tutorial","title":"Solution","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"You can solve instances as follows:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"flow = solve_frank_wolfe(problem; verbose=false, max_iteration=1000)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The solution can be visualized with the same plotting function:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"plot_network(problem, flow; nodes=false, zones=false, tiles=false)","category":"page"}]
}
