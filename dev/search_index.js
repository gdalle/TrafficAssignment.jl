var documenterSearchIndex = {"docs":
[{"location":"api/#API-reference","page":"API reference","title":"API reference","text":"","category":"section"},{"location":"api/","page":"API reference","title":"API reference","text":"CollapsedDocStrings = true\nCurrentModule = TrafficAssignment","category":"page"},{"location":"api/#Public","page":"API reference","title":"Public","text":"","category":"section"},{"location":"api/","page":"API reference","title":"API reference","text":"Modules = [TrafficAssignment]\nPrivate = false","category":"page"},{"location":"api/#TrafficAssignment.TrafficAssignment","page":"API reference","title":"TrafficAssignment.TrafficAssignment","text":"TrafficAssignment\n\nA Julia package for studying traffic assignment problems, using data from https://github.com/bstabler/TransportationNetworks.\n\n\n\n\n\n","category":"module"},{"location":"api/#TrafficAssignment.TrafficAssignmentProblem","page":"API reference","title":"TrafficAssignment.TrafficAssignmentProblem","text":"struct TrafficAssignmentProblem{B<:Union{Float64, SparseArrays.SparseMatrixCSC{Float64, Int64}}, P<:Union{Float64, SparseArrays.SparseMatrixCSC{Float64, Int64}}, T<:Union{Missing, SparseArrays.SparseMatrixCSC{Float64, Int64}}, L<:Union{Missing, SparseArrays.SparseMatrixCSC{Int64, Int64}}, C<:Union{Missing, Vector{Float64}}, F<:Union{Nothing, SparseArrays.SparseMatrixCSC{Float64, Int64}}}\n\nInstance of the static traffic assignment problem.\n\nDetails\n\nThe link travel time is given by travel_time = free_flow_time * ( 1 + b * (flow/capacity)^power).\n\nThe generalized cost is cost = travel_time + toll_factor * toll + distance_factor * distance.\n\nFields\n\ninstance_name::String\ndataset_name::String\nnumber_of_zones::Int64\nnumber_of_nodes::Int64\nfirst_thru_node::Int64\nnumber_of_links::Int64\ncapacity::SparseArrays.SparseMatrixCSC{Float64, Int64}\nlink_length::SparseArrays.SparseMatrixCSC{Float64, Int64}\nfree_flow_time::SparseArrays.SparseMatrixCSC{Float64, Int64}\nspeed_limit::SparseArrays.SparseMatrixCSC{Float64, Int64}\nb::Union{Float64, SparseArrays.SparseMatrixCSC{Float64, Int64}}\npower::Union{Float64, SparseArrays.SparseMatrixCSC{Float64, Int64}}\ntoll::Union{Missing, SparseArrays.SparseMatrixCSC{Float64, Int64}}\nlink_type::Union{Missing, SparseArrays.SparseMatrixCSC{Int64, Int64}}\ntotal_od_flow::Float64\ntravel_demand::Dict{Tuple{Int64, Int64}, Float64}\nnode_x::Union{Missing, Vector{Float64}}\nnode_y::Union{Missing, Vector{Float64}}\nvalid_longitude_latitude::Bool\noptimal_flow_volume::Union{Nothing, SparseArrays.SparseMatrixCSC{Float64, Int64}}\noptimal_flow_cost::Union{Nothing, SparseArrays.SparseMatrixCSC{Float64, Int64}}\ntoll_factor::Float64\ndistance_factor::Float64\n\n\n\n\n\n","category":"type"},{"location":"api/#TrafficAssignment.TrafficAssignmentProblem-Tuple{AbstractString}","page":"API reference","title":"TrafficAssignment.TrafficAssignmentProblem","text":"TrafficAssignmentProblem(\n    instance_name;\n    toll_factor,\n    distance_factor\n)\n\n\nUser-friendly constructor for TrafficAssignmentProblem.\n\nThe provided instance_name must be one of the subfolders in https://github.com/bstabler/TransportationNetworks.\n\nWhen you run this function for the first time, the DataDeps package will ask you to confirm download. If you want to skip this check, for instance during CI, set the environment variable ENV[\"DATADEPS_ALWAYS_ACCEPT\"] = true.\n\n\n\n\n\n","category":"method"},{"location":"api/#TrafficAssignment.list_instances-Tuple{}","page":"API reference","title":"TrafficAssignment.list_instances","text":"list_instances()\n\n\nReturn a list of available instance names.\n\n\n\n\n\n","category":"method"},{"location":"api/#TrafficAssignment.plot_network","page":"API reference","title":"TrafficAssignment.plot_network","text":"Plot a transportation network, possibly on top of real-world map tiles.\n\nwarning: Warning\nThis function requires loading one of Makie.jl's backends beforehand, ideally GLMakie.jl. Using tiles=true requires loading Tyler.jl in addition.\n\n\n\n\n\n","category":"function"},{"location":"api/#TrafficAssignment.social_cost-Tuple{TrafficAssignmentProblem, AbstractMatrix}","page":"API reference","title":"TrafficAssignment.social_cost","text":"social_cost(problem, flow)\n\n\nCompute the social cost induced by a matrix of link flows.\n\n\n\n\n\n","category":"method"},{"location":"api/#TrafficAssignment.solve_frank_wolfe-Union{Tuple{TrafficAssignmentProblem}, Tuple{A}, Tuple{TrafficAssignmentProblem, A}} where A","page":"API reference","title":"TrafficAssignment.solve_frank_wolfe","text":"solve_frank_wolfe(problem; ...)\nsolve_frank_wolfe(\n    problem,\n    frank_wolfe_alg;\n    verbose,\n    kwargs...\n)\n\n\nSolve a traffic assignment problem using an algorithm from the FrankWolfe library.\n\nKeyword arguments are passed to frank_wolfe_alg.\n\n\n\n\n\n","category":"method"},{"location":"api/#TrafficAssignment.summarize_instances-Tuple{}","page":"API reference","title":"TrafficAssignment.summarize_instances","text":"summarize_instances()\n\n\nReturn a DataFrame summarizing the dimensions of all available instances.\n\n\n\n\n\n","category":"method"},{"location":"api/#Private","page":"API reference","title":"Private","text":"","category":"section"},{"location":"api/","page":"API reference","title":"API reference","text":"Modules = [TrafficAssignment]\nPublic = false","category":"page"},{"location":"api/#TrafficAssignment.instance_files-Tuple{AbstractString}","page":"API reference","title":"TrafficAssignment.instance_files","text":"instance_files(instance_name)\n\n\nReturn a named tuple (; flow_file, net_file, node_file, trips_file) containing the absolute paths to the 4 data tables of an instance.\n\n\n\n\n\n","category":"method"},{"location":"#TrafficAssignment.jl","page":"Home","title":"TrafficAssignment.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Build Status) (Image: Coverage) (Image: Dev Documentation)","category":"page"},{"location":"","page":"Home","title":"Home","text":"This is a Julia package for studying traffic assignment on road networks, based on data from:","category":"page"},{"location":"","page":"Home","title":"Home","text":"the TransportationNetworks repository","category":"page"},{"location":"#Getting-started","page":"Home","title":"Getting started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install the latest development version, run this in your Julia Pkg REPL:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add https://github.com/gdalle/TrafficAssignment.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"Check out the documentation for details.","category":"page"},{"location":"#Credits","page":"Home","title":"Credits","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package was originally written and maintained by Changhyun Kwon.","category":"page"},{"location":"tutorial/#Tutorial","page":"Tutorial","title":"Tutorial","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"warning: Warning\nPage in construction.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using TrafficAssignment\nusing PrettyTables  # for table display\nusing CairoMakie, Tyler  # for plotting","category":"page"},{"location":"tutorial/#Instances","page":"Tutorial","title":"Instances","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The package gives you access to the following instances:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"pretty_table(summarize_instances())","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"To download and parse one, just specify its name inside the TrafficAssignmentProblem constructor:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"problem = TrafficAssignmentProblem(\"SiouxFalls\")","category":"page"},{"location":"tutorial/#Visualization","page":"Tutorial","title":"Visualization","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"You can visualize instances as follows:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"plot_network(problem)","category":"page"},{"location":"tutorial/#Solution","page":"Tutorial","title":"Solution","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"You can solve instances as follows:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"flow = solve_frank_wolfe(problem; verbose=false, max_iteration=1000)","category":"page"}]
}
