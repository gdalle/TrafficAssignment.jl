var documenterSearchIndex = {"docs":
[{"location":"api/#API-reference","page":"API reference","title":"API reference","text":"","category":"section"},{"location":"api/","page":"API reference","title":"API reference","text":"CollapsedDocStrings = true\nCurrentModule = TrafficAssignment","category":"page"},{"location":"api/#Public","page":"API reference","title":"Public","text":"","category":"section"},{"location":"api/","page":"API reference","title":"API reference","text":"Modules = [TrafficAssignment]\nPrivate = false","category":"page"},{"location":"api/#TrafficAssignment.TrafficAssignment","page":"API reference","title":"TrafficAssignment.TrafficAssignment","text":"TrafficAssignment\n\nA Julia package for studying traffic assignment problems, using data from https://github.com/bstabler/TransportationNetworks.\n\n\n\n\n\n","category":"module"},{"location":"api/#TrafficAssignment.TrafficAssignmentProblem","page":"API reference","title":"TrafficAssignment.TrafficAssignmentProblem","text":"TrafficAssignmentProblem(instance_name; ...)\nTrafficAssignmentProblem(\n    instance_name,\n    files;\n    best_objective,\n    toll_factor,\n    distance_factor\n)\n\n\n\n\n\n\n","category":"type"},{"location":"api/#TrafficAssignment.TrafficAssignmentProblem-2","page":"API reference","title":"TrafficAssignment.TrafficAssignmentProblem","text":"struct TrafficAssignmentProblem\n\nFields\n\ninstance_name::String\nnumber_of_zones::Int64\nnumber_of_nodes::Int64\nfirst_thru_node::Int64\nnumber_of_links::Int64\ninit_node::Vector{Int64}\nterm_node::Vector{Int64}\ncapacity::Vector{Float64}\nlink_length::Vector{Float64}\nfree_flow_time::Vector{Float64}\nb::Vector{Float64}\npower::Vector{Float64}\nspeed_limit::Vector{Float64}\ntoll::Vector{Float64}\nlink_type::Vector{Int64}\ntotal_od_flow::Float64\ntravel_demand::Matrix{Float64}\nod_pairs::Vector{Tuple{Int64, Int64}}\ntoll_factor::Float64\ndistance_factor::Float64\nbest_objective::Float64\n\n\n\n\n\n","category":"type"},{"location":"api/#TrafficAssignment.list_instances-Tuple{}","page":"API reference","title":"TrafficAssignment.list_instances","text":"list_instances()\n\n\nReturn a list of available instance names.\n\n\n\n\n\n","category":"method"},{"location":"api/#TrafficAssignment.solve_frank_wolfe-Tuple{TrafficAssignmentProblem}","page":"API reference","title":"TrafficAssignment.solve_frank_wolfe","text":"solve_frank_wolfe(td; method, max_iter_no, step, log, tol)\n\n\nThis function implements methods to find traffic equilibrium flows: currently, Frank-Wolfe (FW) method, Conjugate FW (CFW) method, and Bi-conjugate FW (BFW) method.\n\nSettings\n\nmethod=:fw / :cfw / :bfw (default=:bfw)\nstep=:exact / :newton: exact line search using golden section / a simple Newton-type step (default=:exact)\nlog=:on / :off: displays information from each iteration or not (default=:off)\nmax_iter_no::Integer: maximum number of iterations (default=2000)\ntol::Real: tolerance for the Average Excess Cost (AEC) (default=1e-3)\n\nReferences\n\nMitradjieva, M., & Lindberg, P. O. (2013). The Stiff Is Moving-Conjugate Direction Frank-Wolfe Methods with Applications to Traffic Assignment. Transportation Science, 47(2), 280-293.\n\n\n\n\n\n","category":"method"},{"location":"api/#TrafficAssignment.summarize_instances-Tuple{}","page":"API reference","title":"TrafficAssignment.summarize_instances","text":"summarize_instances()\n\n\nReturn a DataFrame summarizing the dimensions of all available instances.\n\n\n\n\n\n","category":"method"},{"location":"api/#Private","page":"API reference","title":"Private","text":"","category":"section"},{"location":"api/","page":"API reference","title":"API reference","text":"Modules = [TrafficAssignment]\nPublic = false","category":"page"},{"location":"api/#TrafficAssignment.instance_files-Tuple{AbstractString}","page":"API reference","title":"TrafficAssignment.instance_files","text":"instance_files(instance_name)\n\n\nReturn a named tuple (; flow_file, net_file, node_file, trips_file) containing the absolute paths to the 4 data tables of an instance.\n\n\n\n\n\n","category":"method"},{"location":"#TrafficAssignment.jl","page":"Home","title":"TrafficAssignment.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Build Status) (Image: Coverage) (Image: Dev Documentation)","category":"page"},{"location":"","page":"Home","title":"Home","text":"This is a Julia package for studying traffic assignment on road networks.","category":"page"},{"location":"#Getting-started","page":"Home","title":"Getting started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install the latest development version, run this in your Julia Pkg REPL:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add https://github.com/gdalle/TrafficAssignment.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can easily load networks from the TransportationNetworks repository:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using TrafficAssignment\nproblem = TrafficAssignmentProblem(\"SiouxFalls\")\nproblem.number_of_zones\n\n# output\n\n24","category":"page"},{"location":"","page":"Home","title":"Home","text":"And then you can solve the equilibrium problem and compute the total system travel time:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using LinearAlgebra\nlink_flow, link_travel_time, objective = solve_frank_wolfe(problem, log=\"off\", tol=1e-2)\nsystem_travel_time = round(dot(link_travel_time, link_flow); sigdigits=3)\n\n# output\n\n7.47e6","category":"page"},{"location":"#Credits","page":"Home","title":"Credits","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package was originally written and maintained by Changhyun Kwon.","category":"page"}]
}
